// DOM Elements
const workoutCards = document.querySelectorAll(".workout-card");
const filterButtons = document.querySelectorAll(".filter-btn");
const favoriteButtons = document.querySelectorAll(".favorite-btn");
const modal = document.getElementById("workout-modal");
const modalClose = document.querySelector(".modal-close");
const modalTitle = document.getElementById("modal-workout-title");
const modalDuration = document.getElementById("modal-duration");
const modalCalories = document.getElementById("modal-calories");
const modalExercises = document.getElementById("modal-exercises");
const startButton = document.querySelector(".start-btn");
const scheduleButton = document.querySelector(".schedule-btn");

// Add Workout Modal Elements
const addWorkoutBtn = document.querySelector(".add-workout-btn");
const addWorkoutModal = document.getElementById("add-workout-modal");
const addModalClose = document.getElementById("add-modal-close");
const addWorkoutForm = document.getElementById("add-workout-form");
const workoutList = document.querySelector(".workout-list");

// Initialize favorites from localStorage
const initFavorites = () => {
  const favorites = JSON.parse(localStorage.getItem("workoutFavorites")) || [];

  favoriteButtons.forEach((btn) => {
    const card = btn.closest(".workout-card");
    const workoutTitle = card.querySelector(".workout-title").textContent;

    if (favorites.includes(workoutTitle)) {
      btn.classList.add("active");
    }
  });
};

// Save favorites to localStorage
const saveFavorites = () => {
  const favorites = [];
  document.querySelectorAll(".favorite-btn.active").forEach((btn) => {
    const card = btn.closest(".workout-card");
    const workoutTitle = card.querySelector(".workout-title").textContent;
    favorites.push(workoutTitle);
  });

  localStorage.setItem("workoutFavorites", JSON.stringify(favorites));
};

// Open modal with workout details
const openWorkoutModal = (card) => {
  const title = card.querySelector(".workout-title").textContent;
  const duration =
    card.querySelector(".ti-clock").nextElementSibling.textContent;
  const calories =
    card.querySelector(".ti-flame").nextElementSibling.textContent;
  const exercises =
    card.querySelector(".ti-activity").nextElementSibling.textContent;

  modalTitle.textContent = title;
  modalDuration.textContent = duration;
  modalCalories.textContent = calories;
  modalExercises.textContent = exercises;

  modal.classList.add("active");
  document.body.style.overflow = "hidden"; // Prevent scrolling when modal is open
};

// Close modal
const closeModal = () => {
  modal.classList.remove("active");
  document.body.style.overflow = ""; // Restore scrolling
};

// Filter workouts
const filterWorkouts = (filterType) => {
  workoutCards.forEach((card) => {
    if (filterType === "all") {
      card.style.display = "block";
    } else {
      const cardType = card.dataset.type;
      card.style.display = cardType === filterType ? "block" : "none";
    }
  });
};

// Show add workout modal
const showAddWorkoutModal = () => {
  addWorkoutModal.classList.add("active");
  document.body.style.overflow = "hidden"; // Prevent scrolling when modal is open
};

// Hide add workout modal
const hideAddWorkoutModal = () => {
  addWorkoutModal.classList.remove("active");
  document.body.style.overflow = ""; // Restore scrolling
  addWorkoutForm.reset(); // Reset form fields
};

// Save workout data to database
async function saveWorkoutData(userId, workoutTitle, workoutType, duration, calories, exercises, date) {
  try {
    // Make sure the date is in YYYY-MM-DD format
    let formattedDate;
    
    if (date instanceof Date) {
      formattedDate = date.toISOString().split('T')[0];
    } else if (typeof date === 'string' && date.includes('T')) {
      // If it's an ISO string like '2025-04-15T22:42:23.641Z'
      formattedDate = date.split('T')[0];
    } else {
      // Assume it's already formatted correctly
      formattedDate = date;
    }
    
    const response = await fetch('/api/save-workout', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: userId,
        workout_title: workoutTitle,
        workout_type: workoutType,
        duration,
        calories,
        exercises,
        date: formattedDate
      }),
    });

    const data = await response.json();
    
    if (response.ok) {
      // Save user ID to localStorage for future use if it was generated by the server
      if (data.userId) {
        localStorage.setItem('userId', data.userId);
      }
      console.log('Workout data saved successfully:', data);
      return true;
    } else {
      console.error('Failed to save workout data:', data.error);
      alert('Failed to save workout data. Please try again.');
      return false;
    }
  } catch (error) {
    console.error('Error saving workout data:', error);
    alert('An error occurred while saving your workout data.');
    return false;
  }
}

// Add new workout
const addNewWorkout = (event) => {
  event.preventDefault();

  // Get form values
  const title = document.getElementById("workout-title").value;
  const type = document.getElementById("workout-type").value;
  const duration = document.getElementById("workout-duration").value;
  const calories = document.getElementById("workout-calories").value;
  const exercises = document.getElementById("workout-exercises").value;
  const color = document.getElementById("workout-color").value;

  // Create new workout card
  const newWorkoutCard = document.createElement("article");
  newWorkoutCard.className = `workout-card ${color}`;
  newWorkoutCard.dataset.type = type;
  newWorkoutCard.dataset.duration = duration;
  newWorkoutCard.dataset.calories = calories;

  newWorkoutCard.innerHTML = `
    <div class="workout-details">
      <h2 class="workout-title">${title}</h2>
      <button class="favorite-btn" aria-label="Add to favorites">
        <i class="ti ti-heart"></i>
      </button>
      <div class="workout-stats">
        <div class="stat-item">
          <i class="ti ti-clock"></i>
          <span>${duration} Minutes</span>
        </div>
        <div class="stat-item">
          <i class="ti ti-flame"></i>
          <span>${calories} Kcal</span>
        </div>
        <div class="stat-item">
          <i class="ti ti-activity"></i>
          <span>${exercises} Exercises</span>
        </div>
      </div>
    </div>
  `;

  // Save to database
  const userId = localStorage.getItem('userId') || null;
  const today = new Date();
  saveWorkoutData(userId, title, type, duration, calories, exercises, today);

  // Add event listener to the new favorite button
  const newFavoriteBtn = newWorkoutCard.querySelector(".favorite-btn");
  newFavoriteBtn.addEventListener("click", (e) => {
    e.currentTarget.classList.toggle("active");
    saveFavorites();
  });

  // Add event listener to open modal
  newWorkoutCard.addEventListener("click", (e) => {
    if (!e.target.closest(".favorite-btn")) {
      openWorkoutModal(newWorkoutCard);
    }
  });

  // Add the new workout card to the list
  workoutList.appendChild(newWorkoutCard);

  // Hide modal after adding
  hideAddWorkoutModal();

  // Show confirmation message
  showNotification(`${title} workout added successfully!`);
};

// Show notification
function showNotification(message) {
  const notification = document.createElement("div");
  notification.className = "notification";
  notification.textContent = message;

  document.body.appendChild(notification);

  // Remove notification after 3 seconds
  setTimeout(() => {
    notification.classList.add("hide");
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 500);
  }, 3000);
}

// Toggle favorite status
const toggleFavorite = (e) => {
  e.stopPropagation();
  e.currentTarget.classList.toggle("active");
  saveFavorites();
};

// Event listeners
document.addEventListener("DOMContentLoaded", () => {
  // Initialize favorites
  initFavorites();

  // Add click event to workout cards to open modal
  workoutCards.forEach((card) => {
    card.addEventListener("click", (e) => {
      if (!e.target.closest(".favorite-btn")) {
        openWorkoutModal(card);
      }
    });
  });

  // Add click event to favorite buttons
  favoriteButtons.forEach((btn) => {
    btn.addEventListener("click", toggleFavorite);
  });

  // Filter button click events
  filterButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      // Remove active class from all filter buttons
      filterButtons.forEach((button) => button.classList.remove("active"));
      
      // Add active class to clicked button
      btn.classList.add("active");
      
      // Filter workouts based on data-filter attribute
      filterWorkouts(btn.dataset.filter);
    });
  });

  // Modal close event
  modalClose.addEventListener("click", closeModal);

  // Close modal when clicking outside content
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Start workout button event
  startButton.addEventListener("click", () => {
    closeModal();
    showNotification("Workout started!");
    // In a real app, you would navigate to workout session screen
  });

  // Schedule workout button event
  scheduleButton.addEventListener("click", () => {
    closeModal();
    showNotification("Workout scheduled!");
    // In a real app, you would open calendar/scheduling interface
  });

  // Add workout button event
  addWorkoutBtn.addEventListener("click", showAddWorkoutModal);

  // Close add workout modal
  addModalClose.addEventListener("click", hideAddWorkoutModal);

  // Close add workout modal when clicking outside
  addWorkoutModal.addEventListener("click", (e) => {
    if (e.target === addWorkoutModal) {
      hideAddWorkoutModal();
    }
  });

  // Submit add workout form
  addWorkoutForm.addEventListener("submit", addNewWorkout);
});

// Handle escape key to close modals
document.addEventListener("keydown", (e) => {
  if (e.key === "Escape") {
    closeModal();
    hideAddWorkoutModal();
  }
});